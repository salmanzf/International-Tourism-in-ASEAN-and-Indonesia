# -*- coding: utf-8 -*-
"""ASEAN International Tourism.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Rxkz4KdjDHpf6yMTv-kie-LiQlc764bW
"""

pip install --upgrade matplotlib

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""# Data Preparation

## Revenue
"""

revenue = pd.read_csv('/content/drive/MyDrive/Portfolio_Visitor-to-Indonesia/revenue_dollar.csv', encoding='latin-1')
revenue.head(5)

revenue.drop(columns=['Indicator Name', 'Indicator Code', 'Country Code'])

revenue.dtypes

"""### Melt"""

vars_id = list(revenue.columns[0:4])
vars_value = list(revenue.columns[4:])

melted_data = pd.melt(revenue, id_vars=vars_id, value_vars=vars_value)
melted_data

revenue = melted_data.rename(columns={'variable':'Year', 'value':'Revenue'})
revenue.head(5)

"""### Group"""

world_revenue = revenue[revenue['Revenue'].notnull()].loc[revenue['Country Name']=='World'].reset_index(drop=True)
world_revenue

world_revenue['Revenue per Country'] = world_revenue['Revenue']/195
world_revenue.head()

"""## Expenditure"""

expenditure = pd.read_csv('/content/drive/MyDrive/Portfolio_Visitor-to-Indonesia/expenditure_dollar.csv', encoding='latin-1')
expenditure.head(5)

"""### Melt"""

vars_id = list(expenditure.columns[0:4])
vars_value = list(expenditure.columns[4:])

melted_data = pd.melt(expenditure, id_vars=vars_id, value_vars=vars_value)
melted_data

expenditure = melted_data.rename(columns={'variable':'Year', 'value':'Expenditure'})
expenditure.head(5)

"""### Group"""

world_expenditure = expenditure[expenditure['Expenditure'].notnull()].loc[expenditure['Country Name']=='World'].reset_index(drop=True)
world_expenditure

world_expenditure['Expenditure per Country'] = world_expenditure['Expenditure']/195
world_expenditure.head()

"""## Departure"""

departure = pd.read_csv('/content/drive/MyDrive/Portfolio_Visitor-to-Indonesia/number of departure.csv', encoding='latin-1')
departure.head(5)

"""### Melt"""

vars_id = list(departure.columns[0:4])
vars_value = list(departure.columns[4:])

melted_data = pd.melt(departure, id_vars=vars_id, value_vars=vars_value)
melted_data

departure = melted_data.rename(columns={'variable':'Year', 'value':'Departure'})
departure.head(5)

"""### Group"""

world_departure = departure[departure['Departure'].notnull()].loc[departure['Country Name']=='World'].reset_index(drop=True)
world_departure

world_departure['Departure per Country'] = world_departure['Departure']/195
world_departure.head()

"""## Total Visit"""

arrival = pd.read_csv('/content/drive/MyDrive/Portfolio_Visitor-to-Indonesia/number of arrival.csv', encoding='latin-1')
arrival.head(5)

"""### Melt"""

vars_id = list(arrival.columns[0:4])
vars_value = list(arrival.columns[4:])

melted_data = pd.melt(arrival, id_vars=vars_id, value_vars=vars_value)
melted_data

arrival = melted_data.rename(columns={'variable':'Year', 'value':'Arrival'})
arrival.head(5)

"""### Group"""

world_arrival = arrival[arrival['Arrival'].notnull()].loc[arrival['Country Name']=='World'].reset_index(drop=True)
world_arrival

world_arrival['Arrival per Country'] = world_arrival['Arrival']/195
world_arrival.head()

"""## Population"""

population = pd.read_csv('/content/drive/MyDrive/Portfolio_Visitor-to-Indonesia/population.csv', encoding='latin-1')
population.head(5)

"""### Melt"""

vars_id = list(population.columns[0:4])
vars_value = list(population.columns[4:])

melted_data = pd.melt(population, id_vars=vars_id, value_vars=vars_value)
melted_data

population = melted_data.rename(columns={'variable':'Year', 'value':'Population'})
population.head(5)

"""### Group"""

world_population = population[population['Population'].notnull()].loc[population['Country Name']=='World'].reset_index(drop=True)
world_population

"""## Domestic Traffic"""

domestic_traffic = pd.read_csv('/content/drive/MyDrive/Portfolio_Visitor-to-Indonesia/Domestic aircraft traffic (in Count).csv')
domestic_traffic.head(5)

"""### Melt"""

vars_id = list(domestic_traffic.columns[0:1])
vars_value = list(domestic_traffic.columns[1:])

melted_data = pd.melt(domestic_traffic, id_vars=vars_id, value_vars=vars_value)
melted_data

domestic_traffic = melted_data.rename(columns={'variable':'Year', 'value':'Domestic Traffic'})
domestic_traffic.head(5)

"""## World Reference"""

world_reference = world_revenue.merge(world_expenditure, how='left', on=['Country Name', 'Year']).merge(world_departure, how='left', on=['Country Name', 'Year']).merge(world_arrival, how='left',
                                on=['Country Name', 'Year']).merge(world_population, how='left', on=['Country Name', 'Year']).drop(columns=['Country Code_x', 'Country Code_y', 'Indicator Name_x',
                                'Indicator Name_y', 'Indicator Code_x', 'Indicator Code_y'])

world_reference = world_reference.rename(columns={'Departure':'Departure World', 'Arrival':'Arrival World', 'Revenue':'Revenue World', 'Expenditure':'Expenditure World',
                                  'Population':'Population World'})
world_reference

"""## World Bank Reference"""

world_bank = ['High income', 'Low income', 'Lower middle income', 'Middle income', 'Upper middle income']

world_bank_depart = departure[departure['Country Name'].isin(world_bank)]
world_bank_depart

plt.figure(figsize=(20,10))
sns.lineplot(departure[departure['Country Name'].isin(world_bank)], x='Year', y='Departure', hue='Country Name')

world_bank_pop = population[population['Country Name'].isin(world_bank)]
world_bank_pop

world_bank_exp = expenditure[expenditure['Country Name'].isin(world_bank)]
world_bank_exp

"""### Merge

#### Depart & Population
"""

world_bank_income = world_bank_depart.merge(world_bank_pop, on=['Country Name', 'Country Code', 'Year'], how='left').drop(columns=['Indicator Name_x', 'Indicator Name_y',
                                      'Indicator Code_x', 'Indicator Code_y'])
world_bank_income

world_bank_income['Depart per 100k'] = world_bank_income['Departure']/world_bank_income['Population']*100000 
world_bank_income

plt.figure(figsize=(20,5))
sns.lineplot(world_bank_income, x='Year', y='Depart per 100k', hue='Country Name')

"""#### Depart & Expenditure"""

world_bank_dep_exp = world_bank_depart.merge(world_bank_exp, on=['Country Name', 'Country Code', 'Year'], how='left').drop(columns=['Indicator Name_x', 'Indicator Name_y',
                                      'Indicator Code_x', 'Indicator Code_y'])
world_bank_dep_exp

world_bank_dep_exp['Expenditure per Departure'] = world_bank_dep_exp['Expenditure']/world_bank_dep_exp['Departure'] 
world_bank_dep_exp

plt.figure(figsize=(20,5))
sns.lineplot(world_bank_dep_exp, x='Year', y='Expenditure per Departure', hue='Country Name')

plt.figure(figsize=(20,5))
sns.barplot(world_bank_dep_exp[(world_bank_dep_exp['Year']>'2014') & (world_bank_dep_exp['Year']<'2020')], x='Year',
            y='Expenditure per Departure', hue='Country Name')

"""## ASEAN Reference"""

asean = ['Singapore', 'Indonesia', 'Malaysia', 'Lao PDR', 'Vietnam', 'Thailand', 'Philippines', 'Myanmar', 'Cambodia', 'Brunei Darussalam']
asean_2 = ['Singapore', 'Indonesia', 'Malaysia', 'Lao PDR', 'Viet Nam', 'Thailand', 'Philippines', 'Myanmar', 'Cambodia', 'Brunei Darussalam']

"""# Exploratory Data Analysis (EDA)

## Visitor to ASEAN
"""

asean_arrival = arrival[arrival['Country Name'].isin(asean)].loc[arrival['Arrival'].notnull()].reset_index(drop=True)
asean_arrival

plt.figure(figsize=(20,5))
sns.lineplot(asean_arrival[asean_arrival['Year']<'2020'], x='Year', y='Arrival', hue='Country Name')

"""### Indonesia Compared to The World"""

asean_world_arrival = asean_arrival.merge(world_reference, how='left', on='Year').drop(columns=['Country Name_y', 'Revenue World', 'Revenue per Country', 'Expenditure World', 'Country Code_x',
                                    'Country Code_y', 'Indicator Name_x', 'Indicator Name_y', 'Indicator Code_x', 'Indicator Code_y', 'Expenditure per Country', 'Departure World',
                                    'Departure per Country', 'Arrival World', 'Population World']).rename(columns={'Country Name_x':'Country Name'})
asean_world_arrival

plt.figure(figsize=(20,5))
sns.barplot(asean_world_arrival[asean_world_arrival['Country Name']=='Indonesia'], x='Year', y='Arrival', color='cyan')
sns.lineplot(asean_world_arrival[asean_world_arrival['Country Name']=='Indonesia'], x='Year', y='Arrival per Country', marker='o', label='World Average')

"""### Dip Rate during 2020"""

plt.figure(figsize=(20,5))
sns.lineplot(asean_arrival[(asean_arrival['Year']>'2014)') & (asean_arrival['Year']<='2020')], x='Year', y='Arrival', hue='Country Name')

yoy_visit_asean = asean_arrival.groupby(['Country Name', 'Year'])['Arrival'].sum().pct_change().reset_index().sort_values('Year').reset_index(drop=True)
yoy_visit_asean

yoy_visit_asean[(yoy_visit_asean['Country Name'].isin(asean)) & (yoy_visit_asean['Year']=='2020')]

#Mean Reference ASEAN
yoy_visit_asean[(yoy_visit_asean['Country Name'].isin(asean)) & (yoy_visit_asean['Year']=='2020')].groupby('Year')['Arrival'].mean()

plt.figure(figsize=(13,2))
sns.barplot(data=yoy_visit_asean[(yoy_visit_asean['Country Name'].isin(asean)) & (yoy_visit_asean['Year']=='2020')],
            x='Country Name', y=abs(yoy_visit_asean['Arrival']))
plt.title('Dip Rate of Total Visitor during 2020')
plt.axhline(y=0.801792, linestyle='-')
plt.ylabel('Dip Rate')

"""During COVID-19 in 2020, most of asean countries closed its border[[1]](https://www.oecd.org/southeast-asia/ERIA%20COVID19%20and%20ASEAN%20Connectivity.pdf) causing dip rate in Total Visit from International Tourist about 80%.

## Departure in ASEAN
"""

asean_departure = departure[departure['Country Name'].isin(asean)].loc[departure['Departure'].notnull()].reset_index(drop=True)
asean_departure

asean_departure = asean_departure.merge(population, how='left', on=['Country Name', 'Year']).drop(columns=['Indicator Name_x', 'Indicator Name_y', 'Indicator Code_x', 'Indicator Code_y',
                                  'Country Code_x', 'Country Code_y'])
asean_departure

plt.figure(figsize=(20,10))
sns.lineplot(asean_departure, x='Year', y='Departure', hue='Country Name')

"""### Indonesia Compared to The World & ASEAN"""

asean_world_departure = asean_departure.merge(world_reference, how='left', on='Year').drop(columns=['Country Name_y', 'Country Code', 'Indicator Name', 'Indicator Code',
                                        'Revenue World', 'Revenue per Country', 'Expenditure World', 'Expenditure per Country', 'Arrival per Country', 'Departure per Country',
                                        'Arrival World']).rename(columns={'Country Name_x':'Country Name'})
asean_world_departure

asean_world_departure['Departure per 100k'] = asean_world_departure['Departure']/asean_world_departure['Population']*100000
asean_world_departure['Departure World per 100k'] = asean_world_departure['Departure World']/asean_world_departure['Population World']*100000 

asean_world_departure

#ASEAN comparison
plt.figure(figsize=(20,5))
sns.lineplot(asean_world_departure[(asean_world_departure['Year']>='2010') & (asean_world_departure['Year']<='2019')], x='Year', y='Departure per 100k', hue='Country Name')

plt.figure(figsize=(20,10))
sns.barplot(asean_world_departure[asean_world_departure['Country Name']=='Indonesia'], x='Year', y='Departure per 100k', color='magenta')
sns.lineplot(asean_world_departure[asean_world_departure['Country Name']=='Indonesia'], x='Year', y='Departure World per 100k', label='World Average', marker='o')

"""### Dip Rate during 2020"""

yoy_departure_asean = asean_departure.groupby(['Country Name', 'Year'])['Departure'].sum().pct_change().reset_index().sort_values('Year').reset_index(drop=True)
yoy_departure_asean

yoy_departure_asean[(yoy_departure_asean['Country Name'].isin(asean)) & (yoy_departure_asean['Year']=='2020')]

#Mean Reference ASEAN
yoy_departure_asean[(yoy_departure_asean['Country Name'].isin(asean)) & (yoy_departure_asean['Year']=='2020')].groupby('Year')['Departure'].mean()

plt.figure(figsize=(5,2))
sns.barplot(data=yoy_departure_asean[(yoy_departure_asean['Country Name'].isin(asean)) & (yoy_departure_asean['Year']=='2020')],
            x='Country Name', y=abs(yoy_departure_asean['Departure']))
plt.title('Dip Rate of Total Departure during 2020')
plt.axhline(y=0.784696, linestyle='-')
plt.ylabel('Dip Rate')

"""Similar phenomenon to Total Visitor

## Revenue in ASEAN
"""

asean_revenue = revenue[revenue['Country Name'].isin(asean)].loc[revenue['Revenue'].notnull()].reset_index(drop=True)
asean_revenue

plt.figure(figsize=(20,5))
sns.lineplot(asean_revenue[asean_revenue['Year']<'2020'], x='Year', y='Revenue', hue='Country Name')

plt.figure(figsize=(13,2))
sns.barplot(asean_revenue[asean_revenue['Year']=='2018'].sort_values(by=['Revenue'], ascending=False), x='Country Name', y='Revenue', color='green')

"""### Dip Rate during 2020"""

yoy_revenue_asean = asean_revenue.groupby(['Country Name', 'Year'])['Revenue'].sum().pct_change().reset_index().sort_values('Year').reset_index(drop=True)
yoy_revenue_asean

yoy_revenue_asean[(yoy_revenue_asean['Country Name'].isin(asean)) & (yoy_revenue_asean['Year']=='2020')]

#Mean Reference ASEAN
yoy_revenue_asean[(yoy_revenue_asean['Country Name'].isin(asean)) & (yoy_revenue_asean['Year']=='2020')].groupby('Year')['Revenue'].mean()

plt.figure(figsize=(13,3))
sns.barplot(data=yoy_revenue_asean[(yoy_revenue_asean['Country Name'].isin(asean)) & (yoy_revenue_asean['Year']=='2020')],
            x='Country Name', y=abs(yoy_revenue_asean['Revenue']))
plt.title('Dip Rate of Total Revenue during 2020')
plt.axhline(y=0.788576, linestyle='-')
plt.ylabel('Dip Rate')

"""### Revenue per Visit"""

asean_rev_per_visit = asean_revenue.merge(asean_arrival, how='left', on=['Country Name', 'Country Code', 'Year']).drop(columns=['Indicator Name_x', 'Indicator Name_y', 'Indicator Code_x',
                                    'Indicator Code_y']).rename(columns={'Country Name_x':'Country Name'})
asean_rev_per_visit

asean_rev_per_visit['Revenue per Arrival'] = asean_rev_per_visit['Revenue']/asean_rev_per_visit['Arrival']
asean_rev_per_visit

plt.figure(figsize=(20,10))
sns.lineplot(asean_rev_per_visit[asean_rev_per_visit['Year']<'2020'], x='Year', y='Revenue per Arrival', hue='Country Name')

plt.figure(figsize=(13,2))
sns.barplot(asean_rev_per_visit[asean_rev_per_visit['Year']=='2018'].sort_values(by=['Revenue per Arrival'], ascending=False), x='Country Name', y='Revenue per Arrival', color='lime')

"""#### Revenue per Visit Compared to The World"""

asean_world_rev_per_visit = asean_rev_per_visit.merge(world_reference, how='left', on=['Year']).drop(columns=['Country Name_y', 'Expenditure World', 'Expenditure per Country', 'Departure World',
                                          'Revenue per Country', 'Departure per Country', 'Arrival per Country']).rename(columns={'Country Name_x':'Country Name'})
asean_world_rev_per_visit

asean_world_rev_per_visit['Revenue per Arrival World'] = asean_world_rev_per_visit['Revenue World']/asean_world_rev_per_visit['Arrival World']
asean_world_rev_per_visit.head()

plt.figure(figsize=(20,10))
sns.barplot(asean_rev_per_visit[asean_rev_per_visit['Country Name']=='Indonesia'], x='Year', y='Revenue per Arrival', color='green')
sns.lineplot(asean_world_rev_per_visit[asean_world_rev_per_visit['Country Name']=='Indonesia'], x='Year', y='Revenue per Arrival World', marker='o')

"""## Expenditure in ASEAN"""

asean_expenditure = expenditure[expenditure['Country Name'].isin(asean)].loc[expenditure['Expenditure'].notnull()].reset_index(drop=True)
asean_expenditure

"""### Expenditure per Departure"""

asean_exp_per_depart = asean_expenditure.merge(asean_departure, how='left', on=['Country Name',
                                        'Year']).rename(columns={'Country Name_x':'Country Name'})
asean_exp_per_depart

asean_exp_per_depart['Expenditure per Departure'] = asean_exp_per_depart['Expenditure']/asean_exp_per_depart['Departure']
asean_exp_per_depart

plt.figure(figsize=(20,10))
sns.lineplot(asean_exp_per_depart, x='Year', y='Expenditure per Departure', hue='Country Name')

plt.figure(figsize=(13,2))
sns.barplot(asean_exp_per_depart[asean_exp_per_depart['Year']=='2016'].sort_values(by=['Expenditure per Departure'], ascending=False), x='Country Name', y='Expenditure per Departure',
            color='brown')

"""#### Expenditure per Departure Compared to The World"""

asean_world_exp_per_depart = asean_exp_per_depart.merge(world_reference, how='left', on=['Year']).drop(columns=['Country Name_y',
                                                 'Revenue World', 'Revenue per Country', 'Arrival World', 'Expenditure per Country',
                                                 'Departure per Country', 'Arrival per Country']).rename(columns={'Country Name_x':
                                                 'Country Name'})
asean_world_exp_per_depart

asean_world_exp_per_depart['Expenditure per Departure World'] = asean_world_exp_per_depart['Expenditure World']/asean_world_exp_per_depart['Departure World']
asean_world_exp_per_depart.head()

plt.figure(figsize=(20,10))
sns.barplot(asean_exp_per_depart[asean_exp_per_depart['Country Name']=='Indonesia'], x='Year', y='Expenditure per Departure', color='brown')
sns.lineplot(asean_world_exp_per_depart[asean_world_exp_per_depart['Country Name']=='Indonesia'], x='Year', y='Expenditure per Departure World', marker='o')